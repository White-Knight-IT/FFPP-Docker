server {

  gzip on;
  gzip_comp_level 6;
  gzip_types text/plain text/css application/javascript application/json image/svg+xml application/xml+rss;

  # Needs statically compressed .gz files for this to happen
  gzip_static on;

  listen ${NGINX_HTTPS_PORT} ssl http2;

  # I didn't see any dire need to persist certs, they can live by the container, die by the container.
  ssl_certificate /etc/letsencrypt/live/${FFPP_DOMAIN}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/${FFPP_DOMAIN}/privkey.pem;

  expires 12m; # It's aggressive yea, not sure if I will leave it like this
  add_header Cache-Control "public";
  add_header X-Content-Type-Options nosniff;
  add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' https: *.${FFPP_DOMAIN} data:";

  # write logs to persistent, will allow ingestion to SEIM to monitor for unauthorised traffic etc
  access_log /root/ffpp/persistent/nginx_logs/access/${FFPP_DOMAIN}_${NGINX_HTTPS_PORT}_access.log;
  error_log /root/ffpp/persistent/nginx_logs/error/${FFPP_DOMAIN}_${NGINX_HTTPS_PORT}_error.log;

  # We will reverse proxy direct any API requests to Kestrel over https/7074
  location ~* ^/(api|v[0-9]\.[0-9]|.auth|bootstrap)/ {
    proxy_pass https://localhost:7074;
    proxy_read_timeout    90;
    proxy_connect_timeout 90;
    proxy_http_version 1.1;
    proxy_set_header      Host $host;
    proxy_set_header      X-Real-IP $remote_addr;
    proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header      Proxy "";
  }

  # Any requests for swagger will go to Kestrel over https/7074
  location ~* ^/swagger$|^/swagger/ {
    proxy_pass https://localhost:7074;
    proxy_read_timeout    90;
    proxy_connect_timeout 90;
    proxy_http_version 1.1;
    proxy_set_header      Host $host;
    proxy_set_header      X-Real-IP $remote_addr;
    proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header      Proxy "";
  }

  # This will catch all other requests and either serve the index or file else 404
  location / {
    # This is from where we will serve static assets html/css/js/images and the like
    root /var/www/ffpp-webfront;
    index index.html;
    try_files $uri $uri/ =404;
  }
}

server {
  # Prety much this only exists for ACME certificate renewals, and to reply 301 improve yourself with a dose of encryption
  listen  ${NGINX_HTTP_PORT};

  access_log /root/ffpp/persistent/nginx_logs/access/${FFPP_DOMAIN}_${NGINX_HTTP_PORT}_access.log;
  error_log /root/ffpp/persistent/nginx_logs/error/${FFPP_DOMAIN}_${NGINX_HTTP_PORT}_error.log;

  server_name ${FFPP_DOMAIN};

  # Surely it's plain to see that we are forcing all plain connections to secure ones here
  if ($host = ${FFPP_DOMAIN}) {
    return 301 https://$host$request_uri;
  }

  # If it's a url not destined for FFPP we will 404
  return 404;
}
